apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.1.3"
    defaultConfig {
        applicationId "cs6250.benchmarkingsuite.imageprocessing"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cFlags "-I./src/ -I${projectDir}"
                cppFlags ""
            }
        }
    }
    lintOptions {
        abortOnError false
        lintConfig file("lint.xml")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    testCompile 'junit:junit:4.12'
    compile project(':openCVLibrary330')

    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.+'
    compile group: 'org.apache.avro', name: 'avro', version: '1.8.+'
    compile group: 'org.apache.avro', name: 'avro-ipc', version: '1.8.+'
    compile 'org.apache.commons:commons-compress:1.+'
}

def grepFile(file, grepPattern) {
    def lines = []
    file.eachLine {
        line -> if (line.matches(grepPattern)) {
            lines << line
        }
    }
    return lines
}

def getIP() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}

task generate_ipFile() {
    def ipFilePath = "app/src/main/java/cs6250/benchmarkingsuite/imageprocessing/core/IpFile.java"
    def file = new File(ipFilePath)
    file.createNewFile()
    file.withWriter { out ->

        out.println "package cs6250.benchmarkingsuite.imageprocessing.core;\n"
        out.println "public class IpFile {\n"
        out.println "public static String ipAddress = \"${getIP()}\";\n"
        out.println "private IpFile() {} \n}"
    }
}

task generate_iperf_version_string_h() {
    //
    // retrive some string constants from configure.ac and
    // write them to iperf_version.txt
    //

    def build_gradle_path   =   'app/build.gradle'
    def configure_ac_path   =   'app/jni/iperf-3.1.3/configure.ac'
    def version_string_h_path = 'app/version.h'

    //inputs.files  (configure_ac_path, build_gradle_path)
    //outputs.files (version_string_h_path)

    doLast {
        def lines
        def acinitLine
        def tokens

        // tokenize AC_INIT(...) to fetch version strings
        //
        // macro AC_INIT syntax is:
        //  AC_INIT (package, version, [bug-report],[tarname], [url])

        lines = grepFile(new File(configure_ac_path), ~/.*AC_INIT.*/)
        acinitLine = lines[0]
        tokens = acinitLine.split(/(\(|\)|,[ |\t]*)/)

        new File(version_string_h_path).withWriter { out ->

            out.println     "#define PACKAGE_NAME        \"${tokens[1]}\""
            out.println     "#define PACKAGE_VERSION     \"${tokens[2]}\""
            out.println     "#define IPERF_VERSION       \"${tokens[2]}\""
            out.println     "#define PACKAGE_STRING      \"${tokens[1]} ${tokens[2]}\""
            if (tokens.length > 3)
                out.println "#define PACKAGE_BUGREPORT   \"${tokens[3]}\""
            if (tokens.length > 4)
                out.println "#define PACKAGE_TARNAME     \"${tokens[4]}\""
            if (tokens.length > 5)
                out.println "#define PACKAGE_URL         \"${tokens[5]}\""
        }
    }
}

task untar (type: Copy) {
    from tarTree(resources.gzip('jni/iperf-3.1.3-source.tar.gz'))
    into 'jni/' 
}
generate_iperf_version_string_h.dependsOn untar
preBuild.dependsOn generate_iperf_version_string_h
preBuild.dependsOn generate_ipFile
